{
  "id": 6,
  "title": "Tabs Pattern",
  "slug": "tabs-pattern",
  "excerpt": "Organizing content into easily accessible sections.",
  "category": "UI Patterns",
  "tags": ["Navigation", "Content Organization"],
  "content": "<p>The tabs pattern is a common UI element used to divide content into separate views which can be accessed without leaving the page. It mimics the tabbed dividers in a file cabinet, allowing users to quickly switch between different sections of content.</p><h2>Key Features</h2><ul><li><strong>Content organization:</strong> Divides related content into distinct sections</li><li><strong>Space-saving:</strong> Allows multiple views in the same space</li><li><strong>Quick access:</strong> Enables users to switch between views easily</li></ul><h2>Best Practices</h2><ol><li><strong>Clear labels:</strong> Use short, descriptive labels for each tab</li><li><strong>Visual feedback:</strong> Clearly indicate which tab is currently active</li><li><strong>Consistent content:</strong> Ensure content within tabs is related and consistent in structure</li><li><strong>Accessibility:</strong> Make tabs navigable via keyboard and readable by screen readers</li><li><strong>Responsive design:</strong> Adapt tab layout for different screen sizes (e.g., vertical tabs on mobile)</li></ol><h2>Use Cases</h2><ul><li>Product details pages (Description, Specifications, Reviews)</li><li>Settings or preferences panels</li><li>Dashboard sections</li><li>Form organization</li></ul><p>The tabs pattern is an effective way to organize related content and reduce cognitive load for users. However, be cautious not to use too many tabs, as this can become overwhelming and defeat the purpose of organization.</p><h2>Implementation</h2><p>Here's a basic implementation of the tabs pattern using React and Tailwind CSS:</p><pre><code class=\"language-jsx\">import React, { useState } from 'react';\n\nconst TabsDemo = () => {\n  const [activeTab, setActiveTab] = useState(0);\n\n  const tabs = [\n    { label: 'Tab 1', content: 'This is the content for Tab 1.' },\n    { label: 'Tab 2', content: 'Here\\'s some information in Tab 2.' },\n    { label: 'Tab 3', content: 'Tab 3 contains different data.' },\n  ];\n\n  return (\n    <div className=\"tabs-demo bg-white shadow-md rounded-lg p-6\">\n      <h2 className=\"text-2xl font-bold mb-4\">Tabs Demo</h2>\n      <div className=\"tabs flex border-b\">\n        {tabs.map((tab, index) => (\n          <button\n            key={index}\n            className={`tab py-2 px-4 font-semibold ${\n              activeTab === index\n                ? 'text-blue-600 border-b-2 border-blue-600'\n                : 'text-gray-500 hover:text-blue-600'\n            }`}\n            onClick={() => setActiveTab(index)}\n          >\n            {tab.label}\n          </button>\n        ))}\n      </div>\n      <div className=\"tab-content mt-4 p-4 bg-gray-50 rounded\">\n        {tabs[activeTab].content}\n      </div>\n    </div>\n  );\n};\n\nexport default TabsDemo;</code></pre><p>This implementation demonstrates the key features of the tabs pattern, including content organization, space-saving, and quick access between different sections of content. It also uses Tailwind CSS classes for styling, making it visually appealing and consistent with modern web design practices.</p>",
  "thumbnail": "/images/tabs-thumb.jpg",
  "heroImage": "/images/tabs-hero.jpg",
  "emoji": "ðŸ“‘",
  "backgroundColor": "#20B2AA",
  "demo": [
    { "label": "Tab 1", "content": "This is the content for Tab 1." },
    { "label": "Tab 2", "content": "Here's some information in Tab 2." },
    { "label": "Tab 3", "content": "Tab 3 contains different data." }
  ]
}