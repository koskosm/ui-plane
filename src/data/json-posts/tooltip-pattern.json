{
  "id": 11,
  "title": "Tooltip Pattern",
  "slug": "tooltip-pattern",
  "excerpt": "Providing additional information without cluttering the interface.",
  "category": "UI Patterns",
  "tags": ["Information Display", "User Experience"],
  "content": "<p>Tooltips are small, contextual overlays that appear when a user hovers over, focuses on, or taps an element. They provide additional information or clarification without cluttering the main interface.</p><h2>Key Features</h2><ul><li><strong>Contextual:</strong> Provide information specific to the element they're associated with</li><li><strong>Non-intrusive:</strong> Only appear when triggered by user interaction</li><li><strong>Concise:</strong> Offer brief, helpful information</li></ul><h2>Best Practices</h2><ol><li><strong>Keep it short:</strong> Tooltips should be brief and to the point</li><li><strong>Use for clarification:</strong> Ideal for explaining icons, providing hints, or showing additional details</li><li><strong>Consistent positioning:</strong> Place tooltips consistently relative to their trigger elements</li><li><strong>Avoid for critical information:</strong> Don't hide essential information in tooltips</li><li><strong>Consider mobile:</strong> Ensure tooltips work well on touch devices</li><li><strong>Accessibility:</strong> Make sure tooltips are accessible to keyboard users and screen readers</li></ol><h2>Use Cases</h2><ul><li>Explaining icon meanings</li><li>Providing input field hints in forms</li><li>Showing additional details for list items</li><li>Clarifying the purpose of UI elements</li></ul><p>Tooltips can greatly enhance the usability of an interface when used judiciously. However, overuse can lead to a cluttered experience, so it's important to strike a balance and use tooltips only where they add significant value.</p><h2>Implementation</h2><p>Here's a basic implementation of the tooltip pattern using React and Tailwind CSS:</p><pre><code class=\"language-jsx\">import React from 'react';\n\nconst TooltipDemo = ({ isTooltipVisible, tooltipContent }) => {\n  return (\n    <div className=\"tooltip-demo bg-white shadow-md rounded-lg p-6\">\n      <h2 className=\"text-2xl font-bold mb-4\">Tooltip Demo</h2>\n      <div className=\"relative inline-block\">\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          className=\"h-6 w-6 text-blue-500 cursor-pointer\"\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n          width=\"24\"\n          height=\"24\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n          />\n        </svg>\n        {isTooltipVisible && (\n          <div className=\"absolute z-10 w-48 px-2 py-1 text-sm font-medium text-white bg-gray-700 rounded-lg shadow-sm -top-10 left-1/2 -translate-x-1/2\">\n            {tooltipContent}\n            <div className=\"absolute w-2 h-2 bg-gray-700 rotate-45 -bottom-1 left-1/2 -translate-x-1/2\"></div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TooltipDemo;</code></pre><p>This implementation demonstrates the key features of the tooltip pattern, including contextual display, non-intrusive behavior, and concise information presentation. It uses React for rendering and Tailwind CSS for styling, making it visually appealing and consistent with modern web design practices. The tooltip visibility is controlled by the parent component, allowing for more flexible usage in different contexts.</p>",
  "thumbnail": "/images/tooltip-thumb.jpg",
  "heroImage": "/images/tooltip-hero.jpg",
  "emoji": "ðŸ’¬",
  "backgroundColor": "#FFDAB9",
  "demo": {
    "tooltipContent": "This is a tooltip!"
  }
}