{
  "id": 10,
  "title": "Dropdown Pattern",
  "slug": "dropdown-pattern",
  "excerpt": "Providing a compact way to present multiple options.",
  "category": "UI Patterns",
  "tags": ["Navigation", "Form Design"],
  "content": "<p>The dropdown pattern, also known as a select menu, is a common UI element used to present a list of options in a compact format. It allows users to choose one option from a list without taking up excessive screen space.</p><h2>Key Features</h2><ul><li><strong>Space-efficient:</strong> Condenses multiple options into a single control</li><li><strong>Expandable:</strong> Reveals options on user interaction</li><li><strong>Customizable:</strong> Can include icons, grouping, and search functionality</li></ul><h2>Best Practices</h2><ol><li><strong>Clear labeling:</strong> Use descriptive labels for the dropdown and its options</li><li><strong>Appropriate use:</strong> Use dropdowns for lists of 5-15 items; consider alternatives for very short or long lists</li><li><strong>Default selection:</strong> Provide a meaningful default option when possible</li><li><strong>Keyboard accessibility:</strong> Ensure the dropdown can be navigated and operated using keyboard controls</li><li><strong>Mobile optimization:</strong> Adapt the dropdown for touch interfaces on mobile devices</li></ol><h2>Use Cases</h2><ul><li>Selecting from a list of predefined options in forms</li><li>Filtering content on a page</li><li>Language or currency selection</li><li>Navigation menus with multiple levels</li></ul><p>While dropdowns are versatile and widely used, they can sometimes hide important options from users. Consider the context and user needs when deciding whether a dropdown is the best choice for your interface.</p><h2>Implementation Example</h2><p>Here's a basic implementation of a custom dropdown using HTML, CSS, and JavaScript:</p><h3>HTML</h3><pre><code class=\"language-html\">&lt;div class=\"custom-dropdown\"&gt;\n  &lt;button class=\"dropdown-toggle\"&gt;Select an option&lt;/button&gt;\n  &lt;ul class=\"dropdown-menu\"&gt;\n    &lt;li&gt;Option 1&lt;/li&gt;\n    &lt;li&gt;Option 2&lt;/li&gt;\n    &lt;li&gt;Option 3&lt;/li&gt;\n    &lt;li&gt;Option 4&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;</code></pre><h3>CSS</h3><pre><code class=\"language-css\">.custom-dropdown {\n  position: relative;\n  display: inline-block;\n}\n\n.dropdown-toggle {\n  padding: 10px 15px;\n  background-color: #f8f9fa;\n  border: 1px solid #ced4da;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.dropdown-menu {\n  position: absolute;\n  top: 100%;\n  left: 0;\n  z-index: 1000;\n  display: none;\n  min-width: 160px;\n  padding: 5px 0;\n  margin: 2px 0 0;\n  background-color: #fff;\n  border: 1px solid rgba(0,0,0,.15);\n  border-radius: 4px;\n  box-shadow: 0 6px 12px rgba(0,0,0,.175);\n}\n\n.dropdown-menu li {\n  padding: 3px 20px;\n  cursor: pointer;\n}\n\n.dropdown-menu li:hover {\n  background-color: #f8f9fa;\n}\n\n.show {\n  display: block;\n}</code></pre><h3>JavaScript</h3><pre><code class=\"language-javascript\">const dropdownToggle = document.querySelector('.dropdown-toggle');\nconst dropdownMenu = document.querySelector('.dropdown-menu');\nconst dropdownItems = dropdownMenu.querySelectorAll('li');\n\ndropdownToggle.addEventListener('click', () => {\n  dropdownMenu.classList.toggle('show');\n});\n\ndropdownItems.forEach(item => {\n  item.addEventListener('click', () => {\n    dropdownToggle.textContent = item.textContent;\n    dropdownMenu.classList.remove('show');\n  });\n});\n\n// Close the dropdown when clicking outside\ndocument.addEventListener('click', (event) => {\n  if (!event.target.closest('.custom-dropdown')) {\n    dropdownMenu.classList.remove('show');\n  }\n});</code></pre><p>This example provides a basic implementation of a custom dropdown. Remember to enhance it with proper ARIA attributes and keyboard navigation for better accessibility in production environments.</p>",
  "demo": "[\"Option 1\", \"Option 2\", \"Option 3\", \"Option 4\"]",
  "thumbnail": "/images/dropdown-thumb.jpg",
  "heroImage": "/images/dropdown-hero.jpg",
  "emoji": "ðŸ”½",
  "backgroundColor": "#DDA0DD"
}